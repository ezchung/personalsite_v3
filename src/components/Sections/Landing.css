.landing-container {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    padding: 2rem;
    background-color: #f5f5f5;
    color: #333;
    font-family: Inter, sans-serif;
  }
  
  .content-wrapper {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    height: 100%;
  }
  
  .text-content {
    display: flex;
    flex-direction: column;
    align-items: flex-start;
    margin-bottom: 2rem;
  }
  
  h1 {
    font-size: 3rem;
    font-weight: bold;
    margin-bottom: 1rem;
    text-align: left;
  }
  
  .icon-container {
    display: flex;
    gap: 1rem;
  }
  
  .icon {
    width: 40px;
    height: 40px;
    background-color: #555;
    color: white;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 4px;
    font-weight: bold;
  }
  
  .image-container {
    width: 100%;
    display: flex;
    justify-content: center;
    align-items: flex-end;
    flex-grow: 1;
  }
  
  .anime-image {
    max-width: 100%;
    max-height: 60vh;
    object-fit: contain;
  }
  
  @media (min-width: 768px) {
    .content-wrapper {
      flex-direction: row;
      align-items: center;
    }
  
    .text-content {
      flex: 1;
      margin-bottom: 0;
      margin-right: 2rem;
    }
  
    .image-container {
      flex: 1;
      justify-content: flex-end;
    }
  }

  /**
Structure Changes:

- We've moved from a single `Landing` component to a more structured layout that 
    clearly separates the text content and image areas.
- The content is now wrapped in a `content-wrapper` div, which uses flexbox to 
    create a side-by-side layout for text and image.


CSS Separation:

- All styles have been moved to a separate `Landing.css` file. This improves 
    maintainability and follows the principle of separation of concerns.
- The CSS uses class names instead of inline styles, which is generally considered 
    a better practice for larger projects.


Responsive Design:

- The layout uses flexbox, which inherently provides some responsiveness.
- The text content is limited to 50% of the width, ensuring it doesn't overlap 
    with the image area on larger screens.


Image Placeholder:

- Instead of directly using an image, we've created a `pseudo-image` div. This 
    serves as a placeholder for where anime character image will go.
- The placeholder has a light gray background with a dashed border, making it clear 
    that it's a placeholder.


Icon Placeholders:

- We've kept the concept of technology icons, represented by a simple flex container 
    with placeholder divs.
- These can be easily replaced with actual icons or images later.



Styling Improvements:

- The overall color scheme has been adjusted to use a light background (#f5f5f5) 
    and dark text (#333) for better readability.
- Font sizes and spacing have been adjusted for a more balanced look.



Flexibility:

- This structure allows for easy modifications. For example, you can easily replace 
    the placeholder image with your actual anime character image by updating the CSS.


Originally:
The layout issue where the image was below the text instead of beside it.
The lack of clear structure in the CSS, which was previously mixed with the component.
The absence of a clear placeholder for the image.
The potential responsiveness issues on different screen sizes.
  */